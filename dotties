#!/usr/bin/env bash

version="0.1.0"
script_name=$0
dottiesfile=$HOME/.dotties

check_cmd() {
    if [[ ! $(command -v "$1") ]]; then
        echo "It seems like you don't have $1."
        echo "Please install $1. A mac user, you can try brew insatll $1."
        exit 1
    fi
}

check_cmd gh

if ((BASH_VERSINFO[0] < 4)); then
    printf '%s\n' "Error: This requires Bash v4.0 or higher. You have version $BASH_VERSION." 1>&2
    exit 2
fi

# check if you are logged in github
if [[ $(gh auth status) -eq 1 ]] >&/dev/null; then
    # not logged-in
    echo ">>> You must logged in. Use 'gh auth login'"
    exit 1
fi

usage() {
    cat <<EOF

Description: Save all dotfiles in the home directory (default) to a Gist and recover from a Gist.

Usage:

Create a new .dotties file:

    dotties

List all dotfiles from your home dir:

    dotties -l
    # or
    dotties --local

Edit the .dotties file to edit:

    dotties -e
    # or
    dotties --edit

Print help.

    dotties -h
    # or
    dotties --help

Print the version.

    dotties -v
    # or
    dotties --version

EOF
    exit
}

fn_create() {
    echo "Creating a dotties file."
    find "$HOME" -maxdepth 1 -exec file {} \; | grep text | cut -d: -f1 >"$dottiesfile"
    echo "Please run $script_name -e or --edit to edit the file."
}

fn_gist_upload() {
    # check if dotties is not empty, else exit
    # without mapfile
    arr=()
    IFS=$'\n' read -ra arr -d '' <"$dottiesfile"
    gh gist create "${arr[@]}"
    # this works
    # mapfile -t <$dottiesfile
    # gh gist create "${MAPFILE[@]}"
}

fn_local() {
    echo "All your dotfiles in the home directory:"
    find "$HOME" -maxdepth 1 -exec file {} \; | grep text | cut -d: -f1
}

fn_recover() {
    echo recover
    # confirm if use want to overwrite dotfiles
    # get from a Gist url
}

fn_read() {
    cat "$dottiesfile"
}

fn_edit() {
    read -rp "Do you want to open it with Vim/v, Emacs/e, or VS code/c?    " EANS
    ans=$(echo "$EANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
    if [[ $ans = "C" ]]; then
        check_cmd code || exit
        code "$dottiesfile"
    elif [[ $ans = "E" ]]; then
        "${EDITOR:-emacs}" "$dottiesfile"
    elif [[ $ans = "V" ]]; then
        "${EDITOR:-vi}" "$dottiesfile"
    else
        echo "Please use either v for vim, e for Emac, or c for VSCode."
        exit 1
    fi
}

fn_start() {
    # 1. If there is the $HOME/.dotties, confirm if you want to create a new dotties. o: open existing .dotties, yes: create a new dotties
    if [[ -f "$HOME/.dotties" ]]; then
        # read -r
        echo "You have the dotties file."
        read -rp "Do you want to edit it, e/edit or to create a new, n/new.   " ANS
        ans=$(echo "$ANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
        if [[ $ans = "O" ]]; then
            fn_edit || exit 1
        elif [[ $ans = "N" ]]; then
            fn_create || exit
        else
            echo "Please answer either O or N."
            exit 1
        fi

        exit
    else
        fn_create || exit
    fi
}

main() {
    if (($# > 0)); then
        case $1 in
        -l | --local)
            fn_local
            exit
            ;;
        -e | --edit)
            fn_edit
            exit
            ;;
        -g | --gist)
            fn_gist_upload "$2"
            exit
            ;;
        -r | --read)
            fn_read
            exit
            ;;
        -h | --help)
            usage
            ;;
        -v | --version)
            echo "${version}"
            exit
            ;;
        *)
            usage
            ;;
        esac
    else
        fn_start
        exit
    fi
}

main "$@"
