#!/usr/bin/env bash

version="0.2.6"
script_name=$(basename "$0")
dotties_dir=$HOME/.dotties
dotties_gist=$HOME/.dotties/gisturl
dotties_file=$HOME/.dotties/dottiesfile

check_cmd() {
    if [[ ! $(command -v "$1") ]]; then
        echo "It seems like you don't have $1."
        echo "Please install $1. If you are a mac user, you can try brew insatll $1."
        exit 1
    fi
}

check_cmd gh

# check if you are logged in github
if [[ $(gh auth status) -eq 1 ]] >&/dev/null; then
    # not logged-in
    echo ">>> You must logged in. Use 'gh auth login'"
    exit 1
fi

check_gh_editor() {
    if [[ -z $(gh config get editor) ]]; then
        read -rp "Please set your GitHub CLI editor? (v/e/n) (vim/emacs/nano)   " ANS
        ans=$(echo "$ANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
        if [[ $ans = "V" ]]; then
            check_cmd vim
            gh_editor="vim"
        elif [[ $ans = "E" ]]; then
            check_cmd emacs
            gh_editor="emacs"
        elif [[ $ans = "N" ]]; then
            check_cmd nano
            gh_editor="nano"
        else
            echo "Please select one editor."
            exit
        fi
        gh config set editor $gh_editor
    fi
}

check_gh_editor
gh_editor=$(gh config get editor)

usage() {
    cat <<EOF

Description: Save all dotfiles in the home directory (default) to a Gist and recover from a Gist.

Usage:
Create a new .dotties file:
    dotties

List all dotfiles from your home dir:
    dotties [-l | --local]

Edit the .dotties file to edit:
    dotties [-e | --edit]

Read the .dotties file:
    dotties [-r | --read]

Create a dotfiles Gist
    dotties [-G | --gist]
            
Edit the dotfiles Gist
    dotties [-E | --editgist]

View the dotfiles Gist
    dotties [-V | --viewgist]

Clone the dotfiles Gist
    dotties [-C | --clone] -dir

Delete the dotfiles Gist
    dotties [-D | --delete]

Print help.
    dotties [-h | --help]

Print the version.
    dotties [-v | --version]

EOF
    exit
}

fn_create() {
    echo "Creating a dotties file."
    find "$HOME" -maxdepth 1 -exec file {} \; | grep text | cut -d: -f1 >"$dotties_file"
    echo "Please run $script_name -e or --edit to edit the file."
}

# write dotties
_upload_dotties_gist() {
    # check if dotties exists and has a length greater than zero., else exit
    if [[ -s $dotties_file ]]; then
        # without mapfile
        arr=()
        IFS=$'\n' read -ra arr -d '' <"$dotties_file"
        gh gist create -d "Created by shinokada/dotties." "${arr[@]}" >"$dotties_gist" || {
            echo "Your file(s) is not readable. Check the permission."
            exit
        }
        echo "Created a secret Gist"
        read -r gist_url <"$dotties_gist"
        python3 -m webbrowser "$gist_url"
    # this works
    # mapfile -t <$dottiesfile
    # gh gist create "${MAPFILE[@]}"
    else
        echo "Please run $script_name, and edit it by $script_name -e."
    fi
}

fn_upload_gist() {
    # if $dotties_gist exist warn if you want to overwrite.
    NUM_CHAR=$(wc -c <"$dotties_gist")
    if [ -s "$dotties_gist" ] && [ "$NUM_CHAR" -gt 10 ]; then
        echo "You already have Dotties Gist."
        read -rp "Do you want to overwrite? (y/n/o) (yes/no/open gist URL)   " ANS
        ans=$(echo "$ANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
        if [[ $ans = "Y" ]]; then
            # _upload_dotties_gist
            exit
        elif [[ $ans = "O" ]]; then
            read -r gist_url <"$dotties_gist"
            python3 -m webbrowser "$gist_url"
            exit
        else
            echo "Exiting ..."
            exit
        fi
    fi
    _upload_dotties_gist
}

fn_edit_gist() {
    if [[ -f $dotties_gist ]]; then
        read -r gist_url <"$dotties_gist"
        gh gist edit "$gist_url"
    else
        echo "You don't have a dotteis Gist."
        echo "You must run $script_name -G first to create a Gist."
        exit 1
    fi
}

fn_show_local() {
    echo "All your dotfiles in the home directory:"
    find "$HOME" -maxdepth 1 -exec file {} \; | grep text | cut -d: -f1
}

fn_clone_gist() {
    if [[ -n $1 ]]; then
        target_dir=$1
    else
        target_dir=$(pwd)
    fi
    read -rp "Do you want to clone in ${target_dir}? (y/n) (yes/no)   " ANS
    ans=$(echo "$ANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
    if [[ $ans = "Y" ]]; then
        read -r gist_url <"$dotties_gist"
        gh gist clone "$gist_url" "$target_dir" || exit
    else
        echo "Exiting..."
        exit
    fi
}

fn_delete_gist() {
    read -rp "Are you sure to delete the dotties gist? (y/n) (yes/no)   " ANS
    ans=$(echo "$ANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
    if [[ $ans = "Y" ]]; then
        gh gist delete "$(<"$dotties_gist")"
        rm "$dotties_gist" || exit
        echo "Deleted the remote and local Gist files."
    else
        echo "Exiting..."
        exit
    fi
}

fn_read() {
    cat "$dotties_file"
}

fn_edit() {
    $gh_editor "$dotties_file" || exit 1
}

fn_view_gist() {
    read -r gist_url <"$dotties_gist"
    gh gist view "$gist_url" || exit
}

fn_start() {
    if [[ ! -d $dotties_dir ]]; then
        mkdir "$dotties_dir"
    fi
    # 1. If there is the $HOME/.dotties, confirm if you want to create a new dotties. o: open existing .dotties, yes: create a new dotties
    if [[ -f "$dotties_file" ]]; then
        # read -r
        echo "You have the dotties file."
        read -rp "Do you want to edit it, e/edit or  create a new, n/new.   " ANS
        ans=$(echo "$ANS" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
        if [[ $ans = "E" ]]; then
            fn_edit "$dotties_file" || exit 1
        elif [[ $ans = "N" ]]; then
            fn_create || exit 1
        else
            echo "Please answer either e/edit or n/new."
            exit 1
        fi

        exit
    else
        fn_create || exit
        exit
    fi
}

main() {
    if (($# > 0)); then
        case $1 in
        -l | --local)
            fn_show_local
            exit
            ;;
        -e | --edit)
            fn_edit
            exit
            ;;
        -G | --Gist)
            fn_upload_gist
            exit
            ;;
        -V | --View)
            fn_view_gist
            exit
            ;;
        -C | --Clone)
            fn_clone_gist "$2"
            exit
            ;;
        -D | --Delete)
            fn_delete_gist
            exit
            ;;
        -E | --Edit)
            fn_edit_gist
            exit
            ;;
        -r | --read)
            fn_read
            exit
            ;;
        -h | --help)
            usage
            ;;
        -v | --version)
            echo "${version}"
            exit
            ;;
        *)
            usage
            ;;
        esac
    else
        fn_start
        exit
    fi
}

main "$@"
